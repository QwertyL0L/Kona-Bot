import discord
from discord.ext import commands
import openai
import asyncio
from gtts import gTTS
from discord import FFmpegPCMAudio
import speech_recognition as sr
from discord.ext import tasks


openai.api_key = "YOUR OPENAI API KEY"

bot = commands.Bot(command_prefix="-",intents=discord.Intents.all())

@bot.event
async def on_ready():
    print('Logged in as {0.user}'.format(bot))
    
#@bot.event
#async def on_message(message):

    #if message.author == bot.user: # don't respond to yourself! 
        #return

    #response = openai.Completion.create(prompt=message.content, engine="text-davinci-003", temperature=0)

    #await message.channel.send(response['choices'][0]['text'])
        


@bot.command()
async def tts(ctx, *, query: str):
    if ctx.author == bot.user: # don't respond to yourself! 
        return
    
    response = openai.Completion.create(prompt=query, engine="text-davinci-003", temperature=0)
    language = 'en'
    myobj = gTTS(text=response['choices'][0]['text'], lang=language, slow=False)
    myobj.save("response.mp3")
    source = FFmpegPCMAudio('response.mp3')
    channel = ctx.message.author.voice.channel
    voice = await channel.connect()
    player = voice.play(source)
    await ctx.reply("Done!")
    while voice.is_playing(): #Checks if voice is playing
        await asyncio.sleep(1) #While it's playing it sleeps for 1 second
    else:
        await asyncio.sleep(1) #If it's not playing it waits 15 seconds
    while voice.is_playing(): #and checks once again if the bot is not playing
        break #if it's playing it breaks
    else:
        await voice.disconnect() #if not it disconnects

@bot.command()
async def transcribe(ctx):
    await ctx.send("Listening...")
    r = sr.Recognizer()
    with sr.Microphone() as source:
        audio = r.listen(source)
    try:
        text = r.recognize_google(audio)
        await ctx.send(f'{text}')
    except sr.UnknownValueError:
        pass

@bot.command()
async def speak(ctx):
    if ctx.author == bot.user: # don't respond to yourself! 
        return
    r = sr.Recognizer()
    with sr.Microphone() as source:
        audio = r.listen(source)
    try:
        text = r.recognize_google(audio)
        await ctx.send("Listening...")
    except sr.UnknownValueError:
        pass
    response = openai.Completion.create(prompt=text, engine="text-davinci-003", temperature=0)
    language = 'en'
    myobj = gTTS(text=response['choices'][0]['text'], lang=language, slow=False)
    myobj.save("response.mp3")
    source = FFmpegPCMAudio('response.mp3')
    channel = ctx.message.author.voice.channel
    voice = await channel.connect()
    player = voice.play(source)
    await ctx.reply("Done!")
    while voice.is_playing(): #Checks if voice is playing
        await asyncio.sleep(1) #While it's playing it sleeps for 1 second
    else:
        await asyncio.sleep(1) #If it's not playing it waits 15 seconds
    while voice.is_playing(): #and checks once again if the bot is not playing
        break #if it's playing it breaks
    else:
        await voice.disconnect() #if not it disconnects

@bot.command()  # This decorator is used to register a command for your bot. In this case, we are using the 'chat' command which will allow users to chat with our bot using OpenAI's API.  
async def chat(ctx, *, message):  # This function will be called when someone uses the 'chat' command in your Discord server. The ctx parameter contains information about the context in which this command was used (e.g., who used it, what channel it was used in, etc.). The message parameter contains the message that was sent by the user after they used the 'chat' command (e.g., "Hello!").  

    response = openai.Completion.create(engine="text-davinci-003", prompt=message)  # Use OpenAI's API to generate a response based on the message that was sent by the user  

    await ctx.send(response['choices'][0]['text'])  # Send back the response generated by OpenAI's API

@tasks.loop(minutes=100000)
async def infchattt(ctx):
        if ctx.author == bot.user:
            return
        await ctx.send("Listening...")
        r = sr.Recognizer()
        with sr.Microphone() as source:
            audio = r.listen(source)
        try:
            text = r.recognize_google(audio)
        except sr.UnknownValueError:
            pass
        response = openai.Completion.create(prompt=text, engine="text-davinci-003", temperature=0)
        language = 'en'
        myobj = gTTS(text=response['choices'][0]['text'], lang=language, slow=False)
        myobj.save("response.mp3")
        source = FFmpegPCMAudio('response.mp3')
        channel = ctx.message.author.voice.channel
        voice = await channel.connect()
        player = voice.play(source)
        await ctx.reply("Done!")
        while voice.is_playing(): #Checks if voice is playing
            await asyncio.sleep(1) #While it's playing it sleeps for 1 second
        else:
            await asyncio.sleep(1) #If it's not playing it waits 15 seconds
        while voice.is_playing(): #and checks once again if the bot is not playing
            break #if it's playing it breaks
        else:
            await voice.disconnect() #if not it disconnects

#async def update_member_count(ctx):
    #while True:
        #await ctx.send(ctx.guild.member_count)
        #channel = discord.utils.get(ctx.guild.channels, id=1063203515754885331)
        #await channel.edit(name=f'Member Count: {ctx.guild.member_count}')
        #await asyncio.sleep(10)

#@bot.command()
#async def updatem(ctx):
    #bot.loop.create_task(update_member_count(ctx))  # Create loop/task
    #await ctx.send("Loop started, changed member count.") # Optional

@bot.command()
async def start(ctx):
    infchattt.start(ctx)
    await ctx.send("Use -stop to stop infchat")

@bot.command()
async def stop(ctx):
    infchattt.stop()
    await ctx.send("Use -start to start infchat")


bot.run('YOUR TOKEN')
